# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Query the cluster brief based on the given duration
type ClusterBrief {
    numOfApplication: Int
    numOfService: Int
    numOfDatabase: Int
    numOfCache: Int
    numOfMQ: Int
}

# Query the trend of alarm rate based on the given duration
type AlarmTrend {
    numOfAlarmRate: [Int]!
}

# Query all conjectural applications based on the given duration
# All applications here are not installed agent.
type ConjecturalAppBrief {
    apps: [ConjecturalApp!]!
}

# The basic info of the conjectural application,
# includes the type and num of same type application
type ConjecturalApp {
    # The display name of the application
    # e.g. MySQL, RocketMQ, Kafka, Nginx
    name: String!
    num: Int!
}

type ApplicationTPS {
    applicationId: Int!
    applicationCode: String
    callsPerSec: Int!
}

type Thermodynamic {
    # Each element in nodes represents a point in Thermodynamic Diagram
    # And the element includes three values:
    # 1) Time Bucket based on query duration
    # 2) Response time index.
    #    Response time = [responseTimeStep * index, responseTimeStep * (index+1))
    #    The last element: [Response Time * index, MAX)
    # 3) The number of calls in this response time duration.
    #
    # Example:
    # [ [0, 0, 10], [0, 1, 43], ...]
    # These ^^^ two represent the left bottom element, and another element above it.
    nodes: [[Long]!]!
    responseTimeStep: Int!
}

extend type Query {
    getClusterTopology(duration: Duration!): Topology
    getClusterBrief(duration: Duration!): ClusterBrief
    getAlarmTrend(duration: Duration!): AlarmTrend
    getConjecturalApps(duration: Duration!): ConjecturalAppBrief
    getTopNSlowService(duration: Duration!, topN: Int!): [ServiceMetric!]!
    getTopNApplicationThroughput(duration: Duration!, topN: Int!): [ApplicationTPS!]!
    getThermodynamic(duration: Duration!, type: ValueType!): Thermodynamic!
}
